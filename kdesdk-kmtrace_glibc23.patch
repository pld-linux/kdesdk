diff -x CVS -urN kdesdk.orig/kmtrace/configure.in.in kdesdk/kmtrace/configure.in.in
--- kdesdk.orig/kmtrace/configure.in.in	2003-03-09 13:16:13.000000000 +0100
+++ kdesdk/kmtrace/configure.in.in	2004-06-11 14:03:45.000000000 +0200
@@ -6,19 +6,6 @@
       if test ! -f /usr/lib/libiberty.a; then
          kde_compile_kmtrace=no
       fi
-      AC_TRY_COMPILE([
-#include <stdlib.h>
-], [
-#if __GLIBC__ > 2
-no idea if this ever works
-#else
-#if __GLIBC__ == 2 && __GLIBC_MINOR__ >= 3
-kmtrace does no longer compile with glibc 2.3.x or newer
-#endif
-#endif
-], , [
-kde_compile_kmtrace=no
-])
       ;;
    *)
       kde_compile_kmtrace=no
diff -x CVS -urN kdesdk.orig/kmtrace/ktrace.c kdesdk/kmtrace/ktrace.c
--- kdesdk.orig/kmtrace/ktrace.c	2002-10-24 09:51:09.000000000 +0200
+++ kdesdk/kmtrace/ktrace.c	2004-06-11 14:03:45.000000000 +0200
@@ -28,18 +28,11 @@
 #define MALLOC_HOOKS
 #define _GNU_SOURCE
 
-#ifndef	_MALLOC_INTERNAL
-#define	_MALLOC_INTERNAL
 #include <pthread.h>
-#define _LIBC
 #include <malloc.h>
-#include <bits/libc-lock.h>
-#endif
 
-#undef _LIBC
 #include <dlfcn.h>
 #include <stdio.h>
-#define _LIBC
 #include <string.h>
 #include <stdlib.h>
 #include <execinfo.h>
@@ -98,8 +91,8 @@
 
 typedef struct
 {
-	__ptr_t ptr;
-	__malloc_size_t size;
+	void* ptr;
+	size_t size;
 	int bt_size;
 	void** bt;
 } tr_entry;
@@ -119,26 +112,26 @@
 
 static void addAllocationToTree(void);
 
-static void tr_freehook __P ((__ptr_t, const __ptr_t));
-static __ptr_t tr_reallochook __P ((__ptr_t, __malloc_size_t,
-									const __ptr_t));
-static __ptr_t tr_mallochook __P ((__malloc_size_t, const __ptr_t));
+static void tr_freehook __P ((void*, const void*));
+static void* tr_reallochook __P ((void*, size_t,
+									const void*));
+static void* tr_mallochook __P ((size_t, const void*));
 /* Old hook values.  */
-static void (*tr_old_free_hook) __P ((__ptr_t ptr, const __ptr_t));
-static __ptr_t (*tr_old_malloc_hook) __P ((__malloc_size_t size,
-										   const __ptr_t));
-static __ptr_t (*tr_old_realloc_hook) __P ((__ptr_t ptr,
-											__malloc_size_t size,
-											const __ptr_t));
+static void (*tr_old_free_hook) __P ((void* ptr, const void*));
+static void* (*tr_old_malloc_hook) __P ((size_t size,
+										   const void*));
+static void* (*tr_old_realloc_hook) __P ((void* ptr,
+											size_t size,
+											const void*));
 
 static FILE* mallstream;
 static char malloc_trace_buffer[TRACE_BUFFER_SIZE];
 
 
 /* Address to breakpoint on accesses to... */
-__ptr_t mallwatch;
+void* mallwatch;
 
-__libc_lock_define_initialized (static, lock)
+static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
 
 
 static int bt_size;
@@ -210,8 +203,8 @@
 }
 
 __inline__ static void 
-tr_log(const __ptr_t caller, __ptr_t ptr, __ptr_t old,
-	   __malloc_size_t size, int op)
+tr_log(const void* caller, void* ptr, void* old,
+	   size_t size, int op)
 {
 	int i, offset;
 
@@ -382,15 +375,15 @@
 
 static void
 tr_freehook (ptr, caller)
-     __ptr_t ptr;
-     const __ptr_t caller;
+     void* ptr;
+     const void* caller;
 {
 	if (ptr == NULL)
 		return;
 	if (ptr == mallwatch)
 		tr_break ();
 
-	__libc_lock_lock (lock);
+        pthread_mutex_lock(&lock);
 #ifdef PROFILE
 	tr_frees++;
 	tr_current_mallocs--;
@@ -405,26 +398,26 @@
 	tr_log(caller, ptr, 0, 0, TR_FREE);
 
 	__free_hook = tr_freehook;
-	__libc_lock_unlock (lock);
+        pthread_mutex_unlock(&lock);
 }
 
-static __ptr_t
+static void*
 tr_mallochook (size, caller)
-     __malloc_size_t size;
-     const __ptr_t caller;
+     size_t size;
+     const void* caller;
 {
-	__ptr_t hdr;
+	void* hdr;
 
-	__libc_lock_lock (lock);
+        pthread_mutex_lock(&lock);
 
 	__malloc_hook = tr_old_malloc_hook;
 	__realloc_hook = tr_old_realloc_hook;
 	__free_hook = tr_old_free_hook;
 
 	if (tr_old_malloc_hook != NULL)
-		hdr = (__ptr_t) (*tr_old_malloc_hook) (size, caller);
+		hdr = (void*) (*tr_old_malloc_hook) (size, caller);
 	else
-		hdr = (__ptr_t) malloc(size);
+		hdr = (void*) malloc(size);
 	tr_log(caller, hdr, 0, size, TR_MALLOC);
 	/* We only build the allocation tree if mallTreeFile has been set. */
 	if (mallTreeFile)
@@ -440,7 +433,7 @@
 	if (tr_current_mallocs > tr_max_mallocs)
 		tr_max_mallocs = tr_current_mallocs;
 #endif
-	__libc_lock_unlock (lock);
+        pthread_mutex_unlock(&lock);
 
 	if (hdr == mallwatch)
 		tr_break ();
@@ -448,27 +441,27 @@
 	return hdr;
 }
 
-static __ptr_t
+static void*
 tr_reallochook (ptr, size, caller)
-     __ptr_t ptr;
-     __malloc_size_t size;
-     const __ptr_t caller;
+     void* ptr;
+     size_t size;
+     const void* caller;
 {
-	__ptr_t hdr;
+	void* hdr;
 
 	if (ptr == mallwatch)
 		tr_break ();
 
-	__libc_lock_lock (lock);
+        pthread_mutex_lock(&lock);
 
 	__free_hook = tr_old_free_hook;
 	__malloc_hook = tr_old_malloc_hook;
 	__realloc_hook = tr_old_realloc_hook;
 
 	if (tr_old_realloc_hook != NULL)
-		hdr = (__ptr_t) (*tr_old_realloc_hook) (ptr, size, caller);
+		hdr = (void*) (*tr_old_realloc_hook) (ptr, size, caller);
 	else
-		hdr = (__ptr_t) realloc (ptr, size);
+		hdr = (void*) realloc (ptr, size);
 
 	tr_log(caller, hdr, ptr, size, TR_REALLOC);
 
@@ -487,7 +480,7 @@
 	}
 #endif
 
-	__libc_lock_unlock (lock);
+        pthread_mutex_unlock(&lock);
 
 	if (hdr == mallwatch)
 		tr_break ();
